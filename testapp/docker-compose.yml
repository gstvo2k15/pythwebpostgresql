version: '3.8'

services:
  app1:
    build:
      context: ./app
    environment:
      - FLASK_APP=app.py
    ports:
      - "5001:5000"
    depends_on:
      - db
    networks:
      - monitoring_net
    restart: always
    container_name: app1

  app2:
    build:
      context: ./app
    environment:
      - FLASK_APP=app.py
    ports:
      - "5002:5000"
    depends_on:
      - db
    networks:
      - monitoring_net
    restart: always
    container_name: app2

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      SONAR_USER: sonarqube
      SONAR_PASSWORD: sonarqube
      SONAR_DB: sonarqube
    ports:
      - "5432:5432"
    networks:
      - monitoring_net
    restart: always
    container_name: db

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    depends_on:
      - app1
      - app2
    networks:
      - monitoring_net
    restart: always
    container_name: nginx

  prometheus:
    image: prom/prometheus:v2.52.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring_net
    restart: always
    container_name: prometheus

  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    networks:
      - monitoring_net
    volumes:
      - ./loki:/etc/loki:ro,z
      - ./loki/loki-data:/loki:rw,z
    command: -config.file=/etc/loki/local-config.yaml
    container_name: loki

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail/config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring_net
    container_name: promtail

  grafana:
    image: grafana/grafana:10.1.10
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"
    networks:
      - monitoring_net
    restart: always
    container_name: grafana

  cadvisor:
    image: secureimages/cadvisor:0.47.2-alpine-3.18.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    privileged: true
    networks:
      - monitoring_net
    restart: always
    container_name: cadvisor

  node_exporter:
    image: prom/node-exporter:v1.8.0
    ports:
      - "9100:9100"
    networks:
      - monitoring_net
    restart: always
    container_name: node_exporter

  blackbox_exporter:
    image: prom/blackbox-exporter:v0.25.0
    ports:
      - "9115:9115"
    networks:
      - monitoring_net
    container_name: blackbox_exporter

  kong:
    image: kong:2.8
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/usr/local/kong/declarative/kong.yml"
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - monitoring_net
    restart: always
    container_name: kong

  code_checker:
    build:
      context: ./pylint
    volumes:
      - ./app:/app
    ports:
      - "5000:5000"
    command: >
      bash -c "python3 /app/app.py"

  sonarqube:
    build:
      context: ./sonarqube
    ports:
      - "9000:9000"
    networks:
      - monitoring_net
    restart: always
    volumes:
      - ./sonarqube/sonarqube_data:/opt/sonarqube/data
      - ./sonarqube/sonarqube_extensions:/opt/sonarqube/extensions
      - ./sonarqube/sonarqube_logs:/opt/sonarqube/logs
      - $PWD/app:/mnt/code
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonarqube
      - SONARQUBE_JDBC_USERNAME=sonarqube
      - SONARQUBE_JDBC_PASSWORD=sonarqube
    container_name: sonarqube

networks:
  monitoring_net:

